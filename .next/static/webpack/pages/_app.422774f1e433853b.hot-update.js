"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absensiApi: function() { return /* binding */ absensiApi; },\n/* harmony export */   authApi: function() { return /* binding */ authApi; },\n/* harmony export */   cabangApi: function() { return /* binding */ cabangApi; },\n/* harmony export */   dashboardApi: function() { return /* binding */ dashboardApi; },\n/* harmony export */   deviceApi: function() { return /* binding */ deviceApi; },\n/* harmony export */   jabatanApi: function() { return /* binding */ jabatanApi; },\n/* harmony export */   karyawanApi: function() { return /* binding */ karyawanApi; },\n/* harmony export */   monitoringApi: function() { return /* binding */ monitoringApi; },\n/* harmony export */   payrollApi: function() { return /* binding */ payrollApi; },\n/* harmony export */   usersApi: function() { return /* binding */ usersApi; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\n// Create axios instance\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"https://api.yourdomain.com\" || 0,\n    timeout: 10000,\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n});\n// Request interceptor to add auth token\napi.interceptors.request.use((config)=>{\n    // Check if we're in browser environment\n    if (true) {\n        const token = localStorage.getItem(\"auth_token\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Response interceptor to handle errors\napi.interceptors.response.use((response)=>{\n    return response;\n}, (error)=>{\n    var _error_response;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        // Unauthorized - clear auth and redirect to login\n        if (true) {\n            localStorage.removeItem(\"auth_token\");\n            localStorage.removeItem(\"auth_user\");\n            // Use Next.js router for navigation instead of window.location\n            const { pathname } = window.location;\n            if (pathname !== \"/login\") {\n                window.location.replace(\"/login\");\n            }\n        }\n    }\n    return Promise.reject(error);\n});\n// Helper function to handle API responses\nconst handleResponse = (response)=>{\n    return response.data;\n};\n// Auth API\nconst authApi = {\n    login: async (credentials)=>{\n        const response = await api.post(\"/auth/login\", credentials);\n        return handleResponse(response);\n    },\n    logout: async ()=>{\n        const response = await api.post(\"/auth/logout\");\n        return handleResponse(response);\n    },\n    getProfile: async ()=>{\n        const response = await api.get(\"/auth/profile\");\n        return handleResponse(response);\n    },\n    refreshToken: async ()=>{\n        const response = await api.post(\"/auth/refresh\");\n        return handleResponse(response);\n    }\n};\n// Users API\nconst usersApi = {\n    getUsers: async (filters)=>{\n        const response = await api.get(\"/users\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getUser: async (id)=>{\n        const response = await api.get(\"/users/\".concat(id));\n        return handleResponse(response);\n    },\n    createUser: async (data)=>{\n        const response = await api.post(\"/users\", data);\n        return handleResponse(response);\n    },\n    updateUser: async (id, data)=>{\n        const response = await api.put(\"/users/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteUser: async (id)=>{\n        const response = await api.delete(\"/users/\".concat(id));\n        return handleResponse(response);\n    }\n};\n// Cabang API\nconst cabangApi = {\n    getCabang: async (filters)=>{\n        const response = await api.get(\"/cabang\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getCabangById: async (id)=>{\n        const response = await api.get(\"/cabang/\".concat(id));\n        return handleResponse(response);\n    },\n    createCabang: async (data)=>{\n        const response = await api.post(\"/cabang\", data);\n        return handleResponse(response);\n    },\n    updateCabang: async (id, data)=>{\n        const response = await api.put(\"/cabang/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteCabang: async (id)=>{\n        const response = await api.delete(\"/cabang/\".concat(id));\n        return handleResponse(response);\n    }\n};\n// Jabatan API\nconst jabatanApi = {\n    getJabatan: async (filters)=>{\n        const response = await api.get(\"/jabatan\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getJabatanById: async (id)=>{\n        const response = await api.get(\"/jabatan/\".concat(id));\n        return handleResponse(response);\n    },\n    createJabatan: async (data)=>{\n        const response = await api.post(\"/jabatan\", data);\n        return handleResponse(response);\n    },\n    updateJabatan: async (id, data)=>{\n        const response = await api.put(\"/jabatan/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteJabatan: async (id)=>{\n        const response = await api.delete(\"/jabatan/\".concat(id));\n        return handleResponse(response);\n    }\n};\n// Karyawan API\nconst karyawanApi = {\n    getKaryawan: async (filters)=>{\n        const response = await api.get(\"/karyawan\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getKaryawanById: async (id)=>{\n        const response = await api.get(\"/karyawan/\".concat(id));\n        return handleResponse(response);\n    },\n    createKaryawan: async (data)=>{\n        const response = await api.post(\"/karyawan\", data);\n        return handleResponse(response);\n    },\n    updateKaryawan: async (id, data)=>{\n        const response = await api.put(\"/karyawan/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteKaryawan: async (id)=>{\n        const response = await api.delete(\"/karyawan/\".concat(id));\n        return handleResponse(response);\n    }\n};\n// Absensi API\nconst absensiApi = {\n    getAbsensi: async (filters)=>{\n        const response = await api.get(\"/absensi\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getAbsensiById: async (id)=>{\n        const response = await api.get(\"/absensi/\".concat(id));\n        return handleResponse(response);\n    },\n    createAbsensi: async (data)=>{\n        const response = await api.post(\"/absensi\", data);\n        return handleResponse(response);\n    },\n    updateAbsensi: async (id, data)=>{\n        const response = await api.put(\"/absensi/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteAbsensi: async (id)=>{\n        const response = await api.delete(\"/absensi/\".concat(id));\n        return handleResponse(response);\n    },\n    syncFingerprint: async ()=>{\n        const response = await api.post(\"/absensi/sync-fingerprint\");\n        return handleResponse(response);\n    },\n    getByDate: async (date)=>{\n        const response = await api.get(\"/absensi/date/\".concat(date));\n        return handleResponse(response);\n    },\n    getMyAttendance: async (filters)=>{\n        const response = await api.get(\"/absensi/my-attendance\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    clockIn: async (data)=>{\n        const response = await api.post(\"/absensi/clock-in\", data);\n        return handleResponse(response);\n    },\n    clockOut: async (data)=>{\n        const response = await api.post(\"/absensi/clock-out\", data);\n        return handleResponse(response);\n    },\n    export: async (filters)=>{\n        const response = await api.get(\"/absensi/export\", {\n            params: filters,\n            responseType: \"blob\"\n        });\n        return handleResponse(response);\n    }\n};\n// Monitoring API\nconst monitoringApi = {\n    getDevices: async ()=>{\n        const response = await api.get(\"/monitoring/devices\");\n        return handleResponse(response);\n    },\n    getDeviceStatus: async (deviceId)=>{\n        const response = await api.get(\"/monitoring/devices/\".concat(deviceId, \"/status\"));\n        return handleResponse(response);\n    },\n    syncDevice: async (deviceId)=>{\n        const response = await api.post(\"/monitoring/devices/\".concat(deviceId, \"/sync\"));\n        return handleResponse(response);\n    },\n    testConnection: async (deviceId)=>{\n        const response = await api.post(\"/monitoring/devices/\".concat(deviceId, \"/test\"));\n        return handleResponse(response);\n    }\n};\n// Device Management API\nconst deviceApi = {\n    // Basic CRUD operations\n    getDevices: async (filters)=>{\n        const response = await api.get(\"/devices\", {\n            params: filters\n        });\n        return handleResponse(response);\n    },\n    getDevice: async (id)=>{\n        const response = await api.get(\"/devices/\".concat(id));\n        return handleResponse(response);\n    },\n    createDevice: async (data)=>{\n        const response = await api.post(\"/devices\", data);\n        return handleResponse(response);\n    },\n    updateDevice: async (id, data)=>{\n        const response = await api.put(\"/devices/\".concat(id), data);\n        return handleResponse(response);\n    },\n    deleteDevice: async (id)=>{\n        const response = await api.delete(\"/devices/\".concat(id));\n        return handleResponse(response);\n    },\n    // Sync operations\n    syncDevice: async (deviceId, data)=>{\n        const response = await api.post(\"/devices/sync\", {\n            device_id: deviceId,\n            ...data\n        });\n        return handleResponse(response);\n    },\n    // Bulk operations\n    bulkSync: async (deviceIds)=>{\n        const response = await api.post(\"/devices/bulk-operations\", {\n            action: \"bulk_sync\",\n            device_ids: deviceIds\n        });\n        return handleResponse(response);\n    },\n    bulkUpdate: async (deviceIds, updates)=>{\n        const response = await api.post(\"/devices/bulk-operations\", {\n            action: \"bulk_update\",\n            device_ids: deviceIds,\n            updates\n        });\n        return handleResponse(response);\n    },\n    bulkTest: async (deviceIds)=>{\n        const response = await api.post(\"/devices/bulk-operations\", {\n            action: \"bulk_test\",\n            device_ids: deviceIds\n        });\n        return handleResponse(response);\n    },\n    bulkRestart: async (deviceIds)=>{\n        const response = await api.post(\"/devices/bulk-operations\", {\n            action: \"bulk_restart\",\n            device_ids: deviceIds\n        });\n        return handleResponse(response);\n    },\n    // Health monitoring\n    getHealthStatus: async (params)=>{\n        const response = await api.get(\"/devices/health-monitor\", {\n            params\n        });\n        return handleResponse(response);\n    },\n    updateHealthStatus: async (deviceId, data)=>{\n        const response = await api.post(\"/devices/health-monitor\", {\n            device_id: deviceId,\n            ...data\n        });\n        return handleResponse(response);\n    },\n    // Real-time sync\n    startRealtimeSync: async (deviceId, options)=>{\n        const response = await api.post(\"/devices/realtime-sync\", {\n            device_id: deviceId,\n            ...options\n        });\n        return handleResponse(response);\n    },\n    getSyncStatus: async (syncId, deviceId)=>{\n        const params = {};\n        if (syncId) params.sync_id = syncId;\n        if (deviceId) params.device_id = deviceId;\n        const response = await api.get(\"/devices/realtime-sync\", {\n            params\n        });\n        return handleResponse(response);\n    },\n    cancelSync: async (syncId)=>{\n        const response = await api.delete(\"/devices/realtime-sync?sync_id=\".concat(syncId));\n        return handleResponse(response);\n    },\n    // Analytics\n    getAnalytics: async (params)=>{\n        const response = await api.get(\"/devices/analytics\", {\n            params\n        });\n        return handleResponse(response);\n    },\n    generateReport: async (data)=>{\n        const response = await api.post(\"/devices/analytics\", data);\n        return handleResponse(response);\n    }\n};\n// Payroll API\nconst payrollApi = {\n    getDeductions: async (period)=>{\n        const response = await api.get(\"/payroll/deductions?period=\".concat(period));\n        return handleResponse(response);\n    },\n    processDeductions: async (period)=>{\n        const response = await api.post(\"/payroll/deductions\", {\n            period\n        });\n        return handleResponse(response);\n    }\n};\n// Dashboard API\nconst dashboardApi = {\n    getStats: async ()=>{\n        const response = await api.get(\"/dashboard/stats\");\n        return handleResponse(response);\n    },\n    getAttendanceChart: async function() {\n        let period = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"7days\";\n        const response = await api.get(\"/dashboard/attendance-chart\", {\n            params: {\n                period\n            }\n        });\n        return handleResponse(response);\n    },\n    getRecentActivities: async function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        const response = await api.get(\"/dashboard/recent-activities\", {\n            params: {\n                limit\n            }\n        });\n        return handleResponse(response);\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFQNkU7UUFDN0QsT0FBT3JGLGVBQWVQO0lBQ3hCO0lBRUE2RixtQkFBbUIsT0FBT0Q7UUFDeEIsTUFBTTVGLFdBQVcsTUFBTW5CLElBQUkrQixJQUFJLENBQUMsdUJBQXVCO1lBQUVnRjtRQUFPO1FBQ2hFLE9BQU9yRixlQUFlUDtJQUN4QjtBQUNGLEVBQUU7QUFFRixnQkFBZ0I7QUFDVCxNQUFNOEYsZUFBZTtJQUMxQkMsVUFBVTtRQUNSLE1BQU0vRixXQUFXLE1BQU1uQixJQUFJa0MsR0FBRyxDQUFDO1FBQy9CLE9BQU9SLGVBQWVQO0lBQ3hCO0lBRUFnRyxvQkFBb0I7WUFBT0osMEVBQWlCO1FBQzFDLE1BQU01RixXQUFXLE1BQU1uQixJQUFJa0MsR0FBRyxDQUFDLCtCQUErQjtZQUFFSyxRQUFRO2dCQUFFd0U7WUFBTztRQUFFO1FBQ25GLE9BQU9yRixlQUFlUDtJQUN4QjtJQUVBaUcscUJBQXFCO1lBQU9DLHlFQUFnQjtRQUMxQyxNQUFNbEcsV0FBVyxNQUFNbkIsSUFBSWtDLEdBQUcsQ0FBQyxnQ0FBZ0M7WUFBRUssUUFBUTtnQkFBRThFO1lBQU07UUFBRTtRQUNuRixPQUFPM0YsZUFBZVA7SUFDeEI7QUFDRixFQUFFO0FBRUYsK0RBQWVuQixHQUFHQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9hcGkudHM/NjhhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXNwb25zZSB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IEFwaVJlc3BvbnNlLCBQYWdpbmF0ZWRSZXNwb25zZSwgTG9naW5DcmVkZW50aWFscywgQXV0aFVzZXIsIFVzZXIsIENhYmFuZywgSmFiYXRhbiwgS2FyeWF3YW4sIEFic2Vuc2ksIE1vbml0b3JpbmdGaW5nZXJwcmludCwgRGFzaGJvYXJkU3RhdHMsIEZpbHRlck9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8vIENyZWF0ZSBheGlvcyBpbnN0YW5jZVxuY29uc3QgYXBpOiBBeGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKHtcbiAgYmFzZVVSTDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnL2FwaScsXG4gIHRpbWVvdXQ6IDEwMDAwLFxuICBoZWFkZXJzOiB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9LFxufSk7XG5cbi8vIFJlcXVlc3QgaW50ZXJjZXB0b3IgdG8gYWRkIGF1dGggdG9rZW5cbmFwaS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXG4gIChjb25maWcpID0+IHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBicm93c2VyIGVudmlyb25tZW50XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhdXRoX3Rva2VuJyk7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHt0b2tlbn1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9LFxuICAoZXJyb3IpID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG4pO1xuXG4vLyBSZXNwb25zZSBpbnRlcmNlcHRvciB0byBoYW5kbGUgZXJyb3JzXG5hcGkuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LFxuICAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAvLyBVbmF1dGhvcml6ZWQgLSBjbGVhciBhdXRoIGFuZCByZWRpcmVjdCB0byBsb2dpblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhdXRoX3Rva2VuJyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhdXRoX3VzZXInKTtcbiAgICAgICAgLy8gVXNlIE5leHQuanMgcm91dGVyIGZvciBuYXZpZ2F0aW9uIGluc3RlYWQgb2Ygd2luZG93LmxvY2F0aW9uXG4gICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgaWYgKHBhdGhuYW1lICE9PSAnL2xvZ2luJykge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCcvbG9naW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG4pO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gaGFuZGxlIEFQSSByZXNwb25zZXNcbmNvbnN0IGhhbmRsZVJlc3BvbnNlID0gPFQ+KHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlPEFwaVJlc3BvbnNlPFQ+Pik6IEFwaVJlc3BvbnNlPFQ+ID0+IHtcbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG59O1xuXG4vLyBBdXRoIEFQSVxuZXhwb3J0IGNvbnN0IGF1dGhBcGkgPSB7XG4gIGxvZ2luOiBhc3luYyAoY3JlZGVudGlhbHM6IExvZ2luQ3JlZGVudGlhbHMpOiBQcm9taXNlPEFwaVJlc3BvbnNlPHsgdXNlcjogQXV0aFVzZXI7IHRva2VuOiBzdHJpbmcgfT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvYXV0aC9sb2dpbicsIGNyZWRlbnRpYWxzKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGxvZ291dDogYXN5bmMgKCk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvYXV0aC9sb2dvdXQnKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldFByb2ZpbGU6IGFzeW5jICgpOiBQcm9taXNlPEFwaVJlc3BvbnNlPEF1dGhVc2VyPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2F1dGgvcHJvZmlsZScpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgcmVmcmVzaFRva2VuOiBhc3luYyAoKTogUHJvbWlzZTxBcGlSZXNwb25zZTx7IHRva2VuOiBzdHJpbmcgfT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvYXV0aC9yZWZyZXNoJyk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcbn07XG5cbi8vIFVzZXJzIEFQSVxuZXhwb3J0IGNvbnN0IHVzZXJzQXBpID0ge1xuICBnZXRVc2VyczogYXN5bmMgKGZpbHRlcnM/OiBGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxBcGlSZXNwb25zZTxQYWdpbmF0ZWRSZXNwb25zZTxVc2VyPj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy91c2VycycsIHsgcGFyYW1zOiBmaWx0ZXJzIH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZ2V0VXNlcjogYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPEFwaVJlc3BvbnNlPFVzZXI+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvdXNlcnMvJHtpZH1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGNyZWF0ZVVzZXI6IGFzeW5jIChkYXRhOiBQYXJ0aWFsPFVzZXI+KTogUHJvbWlzZTxBcGlSZXNwb25zZTxVc2VyPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy91c2VycycsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgdXBkYXRlVXNlcjogYXN5bmMgKGlkOiBudW1iZXIsIGRhdGE6IFBhcnRpYWw8VXNlcj4pOiBQcm9taXNlPEFwaVJlc3BvbnNlPFVzZXI+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvdXNlcnMvJHtpZH1gLCBkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGRlbGV0ZVVzZXI6IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmRlbGV0ZShgL3VzZXJzLyR7aWR9YCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcbn07XG5cbi8vIENhYmFuZyBBUElcbmV4cG9ydCBjb25zdCBjYWJhbmdBcGkgPSB7XG4gIGdldENhYmFuZzogYXN5bmMgKGZpbHRlcnM/OiBGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxBcGlSZXNwb25zZTxQYWdpbmF0ZWRSZXNwb25zZTxDYWJhbmc+Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2NhYmFuZycsIHsgcGFyYW1zOiBmaWx0ZXJzIH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZ2V0Q2FiYW5nQnlJZDogYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPEFwaVJlc3BvbnNlPENhYmFuZz4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9jYWJhbmcvJHtpZH1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGNyZWF0ZUNhYmFuZzogYXN5bmMgKGRhdGE6IFBhcnRpYWw8Q2FiYW5nPik6IFByb21pc2U8QXBpUmVzcG9uc2U8Q2FiYW5nPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9jYWJhbmcnLCBkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIHVwZGF0ZUNhYmFuZzogYXN5bmMgKGlkOiBudW1iZXIsIGRhdGE6IFBhcnRpYWw8Q2FiYW5nPik6IFByb21pc2U8QXBpUmVzcG9uc2U8Q2FiYW5nPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnB1dChgL2NhYmFuZy8ke2lkfWAsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZGVsZXRlQ2FiYW5nOiBhc3luYyAoaWQ6IG51bWJlcik6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kZWxldGUoYC9jYWJhbmcvJHtpZH1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxufTtcblxuLy8gSmFiYXRhbiBBUElcbmV4cG9ydCBjb25zdCBqYWJhdGFuQXBpID0ge1xuICBnZXRKYWJhdGFuOiBhc3luYyAoZmlsdGVycz86IEZpbHRlck9wdGlvbnMpOiBQcm9taXNlPEFwaVJlc3BvbnNlPFBhZ2luYXRlZFJlc3BvbnNlPEphYmF0YW4+Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2phYmF0YW4nLCB7IHBhcmFtczogZmlsdGVycyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldEphYmF0YW5CeUlkOiBhc3luYyAoaWQ6IG51bWJlcik6IFByb21pc2U8QXBpUmVzcG9uc2U8SmFiYXRhbj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9qYWJhdGFuLyR7aWR9YCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBjcmVhdGVKYWJhdGFuOiBhc3luYyAoZGF0YTogUGFydGlhbDxKYWJhdGFuPik6IFByb21pc2U8QXBpUmVzcG9uc2U8SmFiYXRhbj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvamFiYXRhbicsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgdXBkYXRlSmFiYXRhbjogYXN5bmMgKGlkOiBudW1iZXIsIGRhdGE6IFBhcnRpYWw8SmFiYXRhbj4pOiBQcm9taXNlPEFwaVJlc3BvbnNlPEphYmF0YW4+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvamFiYXRhbi8ke2lkfWAsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZGVsZXRlSmFiYXRhbjogYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZGVsZXRlKGAvamFiYXRhbi8ke2lkfWApO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG59O1xuXG4vLyBLYXJ5YXdhbiBBUElcbmV4cG9ydCBjb25zdCBrYXJ5YXdhbkFwaSA9IHtcbiAgZ2V0S2FyeWF3YW46IGFzeW5jIChmaWx0ZXJzPzogRmlsdGVyT3B0aW9ucyk6IFByb21pc2U8QXBpUmVzcG9uc2U8UGFnaW5hdGVkUmVzcG9uc2U8S2FyeWF3YW4+Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2thcnlhd2FuJywgeyBwYXJhbXM6IGZpbHRlcnMgfSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBnZXRLYXJ5YXdhbkJ5SWQ6IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZTxLYXJ5YXdhbj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9rYXJ5YXdhbi8ke2lkfWApO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgY3JlYXRlS2FyeWF3YW46IGFzeW5jIChkYXRhOiBQYXJ0aWFsPEthcnlhd2FuPik6IFByb21pc2U8QXBpUmVzcG9uc2U8S2FyeWF3YW4+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2thcnlhd2FuJywgZGF0YSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICB1cGRhdGVLYXJ5YXdhbjogYXN5bmMgKGlkOiBudW1iZXIsIGRhdGE6IFBhcnRpYWw8S2FyeWF3YW4+KTogUHJvbWlzZTxBcGlSZXNwb25zZTxLYXJ5YXdhbj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQoYC9rYXJ5YXdhbi8ke2lkfWAsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZGVsZXRlS2FyeWF3YW46IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmRlbGV0ZShgL2thcnlhd2FuLyR7aWR9YCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcbn07XG5cbi8vIEFic2Vuc2kgQVBJXG5leHBvcnQgY29uc3QgYWJzZW5zaUFwaSA9IHtcbiAgZ2V0QWJzZW5zaTogYXN5bmMgKGZpbHRlcnM/OiBGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxBcGlSZXNwb25zZTxQYWdpbmF0ZWRSZXNwb25zZTxBYnNlbnNpPj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hYnNlbnNpJywgeyBwYXJhbXM6IGZpbHRlcnMgfSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBnZXRBYnNlbnNpQnlJZDogYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPEFwaVJlc3BvbnNlPEFic2Vuc2k+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYWJzZW5zaS8ke2lkfWApO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgY3JlYXRlQWJzZW5zaTogYXN5bmMgKGRhdGE6IFBhcnRpYWw8QWJzZW5zaT4pOiBQcm9taXNlPEFwaVJlc3BvbnNlPEFic2Vuc2k+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2Fic2Vuc2knLCBkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIHVwZGF0ZUFic2Vuc2k6IGFzeW5jIChpZDogbnVtYmVyLCBkYXRhOiBQYXJ0aWFsPEFic2Vuc2k+KTogUHJvbWlzZTxBcGlSZXNwb25zZTxBYnNlbnNpPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnB1dChgL2Fic2Vuc2kvJHtpZH1gLCBkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGRlbGV0ZUFic2Vuc2k6IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmRlbGV0ZShgL2Fic2Vuc2kvJHtpZH1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIHN5bmNGaW5nZXJwcmludDogYXN5bmMgKCk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvYWJzZW5zaS9zeW5jLWZpbmdlcnByaW50Jyk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBnZXRCeURhdGU6IGFzeW5jIChkYXRlOiBzdHJpbmcpOiBQcm9taXNlPEFwaVJlc3BvbnNlPEFic2Vuc2k+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGAvYWJzZW5zaS9kYXRlLyR7ZGF0ZX1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldE15QXR0ZW5kYW5jZTogYXN5bmMgKGZpbHRlcnM/OiBGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxBcGlSZXNwb25zZTxQYWdpbmF0ZWRSZXNwb25zZTxBYnNlbnNpPj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hYnNlbnNpL215LWF0dGVuZGFuY2UnLCB7IHBhcmFtczogZmlsdGVycyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGNsb2NrSW46IGFzeW5jIChkYXRhOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH0pOiBQcm9taXNlPEFwaVJlc3BvbnNlPEFic2Vuc2k+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2Fic2Vuc2kvY2xvY2staW4nLCBkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGNsb2NrT3V0OiBhc3luYyAoZGF0YTogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9KTogUHJvbWlzZTxBcGlSZXNwb25zZTxBYnNlbnNpPj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9hYnNlbnNpL2Nsb2NrLW91dCcsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZXhwb3J0OiBhc3luYyAoZmlsdGVycz86IGFueSk6IFByb21pc2U8QXBpUmVzcG9uc2U8QmxvYj4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hYnNlbnNpL2V4cG9ydCcsIHsgcGFyYW1zOiBmaWx0ZXJzLCByZXNwb25zZVR5cGU6ICdibG9iJyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxufTtcblxuLy8gTW9uaXRvcmluZyBBUElcbmV4cG9ydCBjb25zdCBtb25pdG9yaW5nQXBpID0ge1xuICBnZXREZXZpY2VzOiBhc3luYyAoKTogUHJvbWlzZTxBcGlSZXNwb25zZTxNb25pdG9yaW5nRmluZ2VycHJpbnRbXT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9tb25pdG9yaW5nL2RldmljZXMnKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldERldmljZVN0YXR1czogYXN5bmMgKGRldmljZUlkOiBzdHJpbmcpOiBQcm9taXNlPEFwaVJlc3BvbnNlPE1vbml0b3JpbmdGaW5nZXJwcmludD4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9tb25pdG9yaW5nL2RldmljZXMvJHtkZXZpY2VJZH0vc3RhdHVzYCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBzeW5jRGV2aWNlOiBhc3luYyAoZGV2aWNlSWQ6IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KGAvbW9uaXRvcmluZy9kZXZpY2VzLyR7ZGV2aWNlSWR9L3N5bmNgKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIHRlc3RDb25uZWN0aW9uOiBhc3luYyAoZGV2aWNlSWQ6IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KGAvbW9uaXRvcmluZy9kZXZpY2VzLyR7ZGV2aWNlSWR9L3Rlc3RgKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxufTtcblxuLy8gRGV2aWNlIE1hbmFnZW1lbnQgQVBJXG5leHBvcnQgY29uc3QgZGV2aWNlQXBpID0ge1xuICAvLyBCYXNpYyBDUlVEIG9wZXJhdGlvbnNcbiAgZ2V0RGV2aWNlczogYXN5bmMgKGZpbHRlcnM/OiBGaWx0ZXJPcHRpb25zKTogUHJvbWlzZTxBcGlSZXNwb25zZTxQYWdpbmF0ZWRSZXNwb25zZTxhbnk+Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2RldmljZXMnLCB7IHBhcmFtczogZmlsdGVycyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldERldmljZTogYXN5bmMgKGlkOiBzdHJpbmcpOiBQcm9taXNlPEFwaVJlc3BvbnNlPGFueT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9kZXZpY2VzLyR7aWR9YCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBjcmVhdGVEZXZpY2U6IGFzeW5jIChkYXRhOiBhbnkpOiBQcm9taXNlPEFwaVJlc3BvbnNlPGFueT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvZGV2aWNlcycsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgdXBkYXRlRGV2aWNlOiBhc3luYyAoaWQ6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxBcGlSZXNwb25zZTxhbnk+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0KGAvZGV2aWNlcy8ke2lkfWAsIGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZGVsZXRlRGV2aWNlOiBhc3luYyAoaWQ6IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kZWxldGUoYC9kZXZpY2VzLyR7aWR9YCk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICAvLyBTeW5jIG9wZXJhdGlvbnNcbiAgc3luY0RldmljZTogYXN5bmMgKGRldmljZUlkOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2RldmljZXMvc3luYycsIHsgZGV2aWNlX2lkOiBkZXZpY2VJZCwgLi4uZGF0YSB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIC8vIEJ1bGsgb3BlcmF0aW9uc1xuICBidWxrU3luYzogYXN5bmMgKGRldmljZUlkczogc3RyaW5nW10pOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2RldmljZXMvYnVsay1vcGVyYXRpb25zJywge1xuICAgICAgYWN0aW9uOiAnYnVsa19zeW5jJyxcbiAgICAgIGRldmljZV9pZHM6IGRldmljZUlkc1xuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgYnVsa1VwZGF0ZTogYXN5bmMgKGRldmljZUlkczogc3RyaW5nW10sIHVwZGF0ZXM6IGFueSk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvZGV2aWNlcy9idWxrLW9wZXJhdGlvbnMnLCB7XG4gICAgICBhY3Rpb246ICdidWxrX3VwZGF0ZScsXG4gICAgICBkZXZpY2VfaWRzOiBkZXZpY2VJZHMsXG4gICAgICB1cGRhdGVzXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBidWxrVGVzdDogYXN5bmMgKGRldmljZUlkczogc3RyaW5nW10pOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2RldmljZXMvYnVsay1vcGVyYXRpb25zJywge1xuICAgICAgYWN0aW9uOiAnYnVsa190ZXN0JyxcbiAgICAgIGRldmljZV9pZHM6IGRldmljZUlkc1xuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgYnVsa1Jlc3RhcnQ6IGFzeW5jIChkZXZpY2VJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9kZXZpY2VzL2J1bGstb3BlcmF0aW9ucycsIHtcbiAgICAgIGFjdGlvbjogJ2J1bGtfcmVzdGFydCcsXG4gICAgICBkZXZpY2VfaWRzOiBkZXZpY2VJZHNcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIC8vIEhlYWx0aCBtb25pdG9yaW5nXG4gIGdldEhlYWx0aFN0YXR1czogYXN5bmMgKHBhcmFtcz86IHtcbiAgICBkZXZpY2VfaWRzPzogc3RyaW5nW107XG4gICAgaW5jbHVkZV9oaXN0b3J5PzogYm9vbGVhbjtcbiAgICB0aW1lX3JhbmdlPzogJ2hvdXInIHwgJ2RheScgfCAnd2VlaycgfCAnbW9udGgnO1xuICB9KTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2RldmljZXMvaGVhbHRoLW1vbml0b3InLCB7IHBhcmFtcyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIHVwZGF0ZUhlYWx0aFN0YXR1czogYXN5bmMgKGRldmljZUlkOiBzdHJpbmcsIGRhdGE6IHtcbiAgICBtZXRyaWNzPzogYW55O1xuICAgIHN0YXR1cz86IHN0cmluZztcbiAgICBlcnJvcl9tZXNzYWdlPzogc3RyaW5nO1xuICB9KTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9kZXZpY2VzL2hlYWx0aC1tb25pdG9yJywge1xuICAgICAgZGV2aWNlX2lkOiBkZXZpY2VJZCxcbiAgICAgIC4uLmRhdGFcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIC8vIFJlYWwtdGltZSBzeW5jXG4gIHN0YXJ0UmVhbHRpbWVTeW5jOiBhc3luYyAoZGV2aWNlSWQ6IHN0cmluZywgb3B0aW9ucz86IHtcbiAgICBzeW5jX3R5cGU/OiAnZnVsbCcgfCAnaW5jcmVtZW50YWwnIHwgJ2F0dGVuZGFuY2Vfb25seScgfCAndXNlcl9vbmx5JztcbiAgICBsYXN0X3N5bmNfdGltZXN0YW1wPzogc3RyaW5nO1xuICAgIGZvcmNlX3N5bmM/OiBib29sZWFuO1xuICB9KTogUHJvbWlzZTxBcGlSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoJy9kZXZpY2VzL3JlYWx0aW1lLXN5bmMnLCB7XG4gICAgICBkZXZpY2VfaWQ6IGRldmljZUlkLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgZ2V0U3luY1N0YXR1czogYXN5bmMgKHN5bmNJZD86IHN0cmluZywgZGV2aWNlSWQ/OiBzdHJpbmcpOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoc3luY0lkKSBwYXJhbXMuc3luY19pZCA9IHN5bmNJZDtcbiAgICBpZiAoZGV2aWNlSWQpIHBhcmFtcy5kZXZpY2VfaWQgPSBkZXZpY2VJZDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9kZXZpY2VzL3JlYWx0aW1lLXN5bmMnLCB7IHBhcmFtcyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGNhbmNlbFN5bmM6IGFzeW5jIChzeW5jSWQ6IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kZWxldGUoYC9kZXZpY2VzL3JlYWx0aW1lLXN5bmM/c3luY19pZD0ke3N5bmNJZH1gKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIC8vIEFuYWx5dGljc1xuICBnZXRBbmFseXRpY3M6IGFzeW5jIChwYXJhbXM/OiB7XG4gICAgZGV2aWNlX2lkcz86IHN0cmluZ1tdO1xuICAgIGNhYmFuZ19pZD86IG51bWJlcjtcbiAgICBzdGFydF9kYXRlPzogc3RyaW5nO1xuICAgIGVuZF9kYXRlPzogc3RyaW5nO1xuICAgIG1ldHJpY3M/OiBzdHJpbmdbXTtcbiAgICBncm91cF9ieT86ICdkZXZpY2UnIHwgJ2NhYmFuZycgfCAnZGF5JyB8ICd3ZWVrJyB8ICdtb250aCc7XG4gIH0pOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KCcvZGV2aWNlcy9hbmFseXRpY3MnLCB7IHBhcmFtcyB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdlbmVyYXRlUmVwb3J0OiBhc3luYyAoZGF0YToge1xuICAgIGRldmljZV9pZHM/OiBzdHJpbmdbXTtcbiAgICBjYWJhbmdfaWQ/OiBudW1iZXI7XG4gICAgc3RhcnRfZGF0ZT86IHN0cmluZztcbiAgICBlbmRfZGF0ZT86IHN0cmluZztcbiAgICByZXBvcnRfdHlwZT86IHN0cmluZztcbiAgICBmb3JtYXQ/OiAnanNvbicgfCAncGRmJyB8ICdleGNlbCc7XG4gIH0pOiBQcm9taXNlPEFwaVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdCgnL2RldmljZXMvYW5hbHl0aWNzJywgZGF0YSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcbn07XG5cbi8vIFBheXJvbGwgQVBJXG5leHBvcnQgY29uc3QgcGF5cm9sbEFwaSA9IHtcbiAgZ2V0RGVkdWN0aW9uczogYXN5bmMgKHBlcmlvZDogc3RyaW5nKTogUHJvbWlzZTxBcGlSZXNwb25zZTxhbnlbXT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoYC9wYXlyb2xsL2RlZHVjdGlvbnM/cGVyaW9kPSR7cGVyaW9kfWApO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG5cbiAgcHJvY2Vzc0RlZHVjdGlvbnM6IGFzeW5jIChwZXJpb2Q6IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KCcvcGF5cm9sbC9kZWR1Y3Rpb25zJywgeyBwZXJpb2QgfSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcbn07XG5cbi8vIERhc2hib2FyZCBBUElcbmV4cG9ydCBjb25zdCBkYXNoYm9hcmRBcGkgPSB7XG4gIGdldFN0YXRzOiBhc3luYyAoKTogUHJvbWlzZTxBcGlSZXNwb25zZTxEYXNoYm9hcmRTdGF0cz4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9kYXNoYm9hcmQvc3RhdHMnKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9LFxuXG4gIGdldEF0dGVuZGFuY2VDaGFydDogYXN5bmMgKHBlcmlvZDogc3RyaW5nID0gJzdkYXlzJyk6IFByb21pc2U8QXBpUmVzcG9uc2U8YW55Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2Rhc2hib2FyZC9hdHRlbmRhbmNlLWNoYXJ0JywgeyBwYXJhbXM6IHsgcGVyaW9kIH0gfSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfSxcblxuICBnZXRSZWNlbnRBY3Rpdml0aWVzOiBhc3luYyAobGltaXQ6IG51bWJlciA9IDEwKTogUHJvbWlzZTxBcGlSZXNwb25zZTxhbnlbXT4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9kYXNoYm9hcmQvcmVjZW50LWFjdGl2aXRpZXMnLCB7IHBhcmFtczogeyBsaW1pdCB9IH0pO1xuICAgIHJldHVybiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBhcGk7Il0sIm5hbWVzIjpbImF4aW9zIiwiYXBpIiwiY3JlYXRlIiwiYmFzZVVSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwidGltZW91dCIsImhlYWRlcnMiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwiY29uZmlnIiwidG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiQXV0aG9yaXphdGlvbiIsImVycm9yIiwiUHJvbWlzZSIsInJlamVjdCIsInJlc3BvbnNlIiwic3RhdHVzIiwicmVtb3ZlSXRlbSIsInBhdGhuYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJyZXBsYWNlIiwiaGFuZGxlUmVzcG9uc2UiLCJkYXRhIiwiYXV0aEFwaSIsImxvZ2luIiwiY3JlZGVudGlhbHMiLCJwb3N0IiwibG9nb3V0IiwiZ2V0UHJvZmlsZSIsImdldCIsInJlZnJlc2hUb2tlbiIsInVzZXJzQXBpIiwiZ2V0VXNlcnMiLCJmaWx0ZXJzIiwicGFyYW1zIiwiZ2V0VXNlciIsImlkIiwiY3JlYXRlVXNlciIsInVwZGF0ZVVzZXIiLCJwdXQiLCJkZWxldGVVc2VyIiwiZGVsZXRlIiwiY2FiYW5nQXBpIiwiZ2V0Q2FiYW5nIiwiZ2V0Q2FiYW5nQnlJZCIsImNyZWF0ZUNhYmFuZyIsInVwZGF0ZUNhYmFuZyIsImRlbGV0ZUNhYmFuZyIsImphYmF0YW5BcGkiLCJnZXRKYWJhdGFuIiwiZ2V0SmFiYXRhbkJ5SWQiLCJjcmVhdGVKYWJhdGFuIiwidXBkYXRlSmFiYXRhbiIsImRlbGV0ZUphYmF0YW4iLCJrYXJ5YXdhbkFwaSIsImdldEthcnlhd2FuIiwiZ2V0S2FyeWF3YW5CeUlkIiwiY3JlYXRlS2FyeWF3YW4iLCJ1cGRhdGVLYXJ5YXdhbiIsImRlbGV0ZUthcnlhd2FuIiwiYWJzZW5zaUFwaSIsImdldEFic2Vuc2kiLCJnZXRBYnNlbnNpQnlJZCIsImNyZWF0ZUFic2Vuc2kiLCJ1cGRhdGVBYnNlbnNpIiwiZGVsZXRlQWJzZW5zaSIsInN5bmNGaW5nZXJwcmludCIsImdldEJ5RGF0ZSIsImRhdGUiLCJnZXRNeUF0dGVuZGFuY2UiLCJjbG9ja0luIiwiY2xvY2tPdXQiLCJleHBvcnQiLCJyZXNwb25zZVR5cGUiLCJtb25pdG9yaW5nQXBpIiwiZ2V0RGV2aWNlcyIsImdldERldmljZVN0YXR1cyIsImRldmljZUlkIiwic3luY0RldmljZSIsInRlc3RDb25uZWN0aW9uIiwiZGV2aWNlQXBpIiwiZ2V0RGV2aWNlIiwiY3JlYXRlRGV2aWNlIiwidXBkYXRlRGV2aWNlIiwiZGVsZXRlRGV2aWNlIiwiZGV2aWNlX2lkIiwiYnVsa1N5bmMiLCJkZXZpY2VJZHMiLCJhY3Rpb24iLCJkZXZpY2VfaWRzIiwiYnVsa1VwZGF0ZSIsInVwZGF0ZXMiLCJidWxrVGVzdCIsImJ1bGtSZXN0YXJ0IiwiZ2V0SGVhbHRoU3RhdHVzIiwidXBkYXRlSGVhbHRoU3RhdHVzIiwic3RhcnRSZWFsdGltZVN5bmMiLCJvcHRpb25zIiwiZ2V0U3luY1N0YXR1cyIsInN5bmNJZCIsInN5bmNfaWQiLCJjYW5jZWxTeW5jIiwiZ2V0QW5hbHl0aWNzIiwiZ2VuZXJhdGVSZXBvcnQiLCJwYXlyb2xsQXBpIiwiZ2V0RGVkdWN0aW9ucyIsInBlcmlvZCIsInByb2Nlc3NEZWR1Y3Rpb25zIiwiZGFzaGJvYXJkQXBpIiwiZ2V0U3RhdHMiLCJnZXRBdHRlbmRhbmNlQ2hhcnQiLCJnZXRSZWNlbnRBY3Rpdml0aWVzIiwibGltaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/api.ts\n"));

/***/ })

});